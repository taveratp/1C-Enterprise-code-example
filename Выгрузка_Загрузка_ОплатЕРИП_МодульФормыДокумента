
#Область Выгрузка

&НаСервере
Функция СформироватьСообщение202()
	
	Док				= Объект.ДокументНаВыгрузкуВЕРИП;
	Объект.ДатаНачисления = Док.ДатаНачисления;
	
	ТЗ				= Док.Начисления.НайтиСтроки(Новый Структура("Выгрузить", Истина));
	
	Т				= Новый ТекстовыйДокумент;
	
	См				= "^";
	См1				= "~";
	
	//Создаем заголовок
	Стр				= "";
	Стр				= Стр + "5";                                                //Версия
	Стр				= Стр + См + СокрЛП(КодОтправителя); //Код отправителя
	Стр				= Стр + См + Док.Номер;                                           //Номер сообщения     
	
	ТекДата_		= Формат(ТекДата, "ДФ=yyyyMMddhhmmss"); 
	Стр				= Стр + См + ТекДата_;                                       //Дата сообщения
	Стр				= Стр + См + ТЗ.Количество();                          //Количество записей
	Стр				= Стр + См + СокрЛП(Док.Организация.ИНН);              //УНП
	Стр				= Стр + См + Прав(СокрЛП(Док.РасчетныйСчет.Банк.Код),3); //Код банка
	Стр				= Стр + См + СокрЛП(Док.РасчетныйСчет.НомерСчета);//Номер р/с
	Стр				= Стр + См + "";                                           //Номер услуги
	Стр				= Стр + См + "933";                                         //Код валюты
	Стр				= Стр + См + "";                                            //
	Т.ДобавитьСтроку(Стр);
	
	//Создаем отдельные записи
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		СуммаКОплате	= СтрокаТЗ.Всего; 
		//СуммаКОплате	= Окр(СуммаКОплате/50) * 50;
		СуммаКОплате	= Формат(СуммаКОплате,"ЧГ=0");
		
		Стр				= "";
		Стр				= Стр + "2";//ТЗ.НомерСтроки;                               //Номер строки  
		Стр				= Стр + См + СокрЛП(СтрокаТЗ.ЛицевойСчет);               	//Лицевой счет 
		Стр				= Стр + См + СокрЛП(СтрокаТЗ.Контрагент.Наименование);   	//ФИО  
		Стр				= Стр + См + СокрЛП(СтрокаТЗ.Помещение.Наименование);  		//Адрес  
		Д				= Формат(Док.ДатаНачисления, "ДФ=MM.yyyy");  
		Стр				= Стр + См + СокрЛП(Д);   					 				 //Период оплаты ????????????????   
		Стр				= Стр + См + СуммаКОплате;   					 		 	 //Сумма задолженности
		
		//Доп. таблица по тарифам
		Стр1			= "";
		Стр1			= Стр1 + "0";                                			 	 //Кол-во счетчиков  
		Стр1			= Стр1 + См1 + "";                                			 //№ счетчика 
		Стр1			= Стр1 + См1 + СуммаКОплате;                                 //Тариф 
		Стр1			= Стр1 + См1 + ""		;                                	 //Тариф 2
		Стр1			= Стр1 + См1 + "";     			                           	 //Норма потребления
		Стр1			= Стр1 + См1 + "0";                                	 		 //Предыдущ.показание счетчика 
		Стр1			= Стр1 + См1 + "0";                                	 		 //Текущ.показание счетчика  
		
		//Стр				= Стр + См + Стр1;
		Стр				= Стр + См + "";
		
		Д				= ДобавитьМесяц(Док.ДатаНачисления,1);  
		Д				= Формат(Д,"ДФ=yyyyMMdd") + "000000";
		Стр				= Стр + См + Д; 											 //Дата требования к оплате ????????????????  
		Стр				= Стр + См + "";               					 			 //Доп.информация
		Стр				= Стр + См + "";               					 			 //Доп.данные
		Стр				= Стр + См + "0";               				 			 //Пеня
		Стр				= Стр + См + "";               					 			 //Кол-во проживающих
		Стр				= Стр + См + ""; 
		Стр				= Стр + См + "";               					 			 
		Стр				= Стр + См + "";
		
		Т.ДобавитьСтроку(Стр);
		
	КонецЦикла;
	
	Возврат Т;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить_в_ЕРИП(Команда)
	
	ОткрытьФайл						= (Команда.Имя = "СформироватьФайл");
	
	КаталогОбмена					= СоздатьКаталогДляОбмена();
	
	//ТекДата							= ТекущаяДата(); 
	
	Текст							= СформироватьСообщение202();
	
	ИмяФ							= Формат(Объект.ДатаНачисления,"ДФ=MMyyyy") + ".202";
	ИмяФайла						= КаталогОбмена + ИмяФ;
	
	Текст.Записать(ИмяФайла, КодировкаТекста.ANSI);
	
	Если ОткрытьФайл Тогда
		
		ЗапуститьПриложение(ИмяФайла);
		
	Иначе
		
		ФТП							= ПолучитьФТПСоединение();
		Если ФТП = Неопределено Тогда
			Сообщить("Соединение с ФТП сервером НЕ установлено!!!");
			Возврат;
		КонецЕсли;
		ФТП.УстановитьТекущийКаталог("/in");
		ФТП.Записать(ИмяФайла,ИмяФ);
		
		Успешно						= УстановитьДатуФормирования();
		
		Предупреждение("Выгрузка завершена!!!");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

&НаКлиенте
Процедура ЗагрузитьОплатыЕРИП(Команда)
	
	ПолучитьФайлыССервераФТП("*.210", Команда = "СДиска");
	//Если ФТП = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если СписокФайловСервера.Количество() = 0 Тогда
		Сообщить("Нет оплат на сервере");
		Возврат;
	КонецЕсли;
	
	Объект.Оплаты.Очистить();
	
	Для Каждого Строка Из СписокФайловСервера Цикл
		
		ИмяФайла			= Строка.ИмяФайлаНаДиске;
		//ПолучитьФайлСФТП(ФТП, Строка.Имя, ИмяФайла);
		Файл				= Новый Файл(ИмяФайла);
		Если НЕ Файл.Существует() Тогда   
			Сообщить("Файл не доступен!");
			Возврат;
		КонецЕсли;
		
		Т	 				= Новый ТекстовыйДокумент;
		Т.Прочитать(ИмяФайла);  
		Стр	 				= Т.ПолучитьСтроку(1); 
		Если СокрЛП(Стр) = "" Тогда 
			//Сообщить("Файл не найден");
			Возврат;
		КонецЕсли;
		
		См					= "^";
		СписокЗначений		= ИзСтрокиСРазделителями(Стр, См);
		Д					= СписокЗначений[3].Значение; //Дата
		ДатаСообщения		= Дата(Число(Лев(Д,4)), Число(Сред(Д,5,2)), Число(Сред(Д,7,2)));  
		Д					= СписокЗначений[10].Значение; //Дата оплаты
		ДатаОплаты			= Дата(Число(Лев(Д,4)), Число(Сред(Д,5,2)), Число(Сред(Д,7,2))); 
		ДатаОплаты_			= ДатаОплаты;   
		
		Для н = 2 По Т.КоличествоСтрок() Цикл  
			
			Если СокрЛП(Т.ПолучитьСтроку(н)) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СписокЗначений					= ИзСтрокиСРазделителями(Т.ПолучитьСтроку(н), См); 
			СтруктураЛицевогоСчета			= РазобратьЛицевойСчет(СокрЛП(СписокЗначений[2].Значение));
			
			Д								= СписокЗначений[11].Значение; //Дата требований к оплате
			ДатаОплаты						= Дата(Число(Лев(Д,4)), Число(Сред(Д,5,2)), Число(Сред(Д,7,2)));
			
			НоваяСтрока						= Объект.Оплаты.Добавить();
			НоваяСтрока.ЛицевойСчет			= СокрЛП(СписокЗначений[2].Значение); 
			НоваяСтрока.СуммаОплаты			= СокрЛП(СписокЗначений[6].Значение); 
			НоваяСтрока.ДатаОплаты			= ДатаОплаты_;   
			НоваяСтрока.ВидОплаты			= СтруктураЛицевогоСчета.УслугаАренды;
			НоваяСтрока.Помещение			= СтруктураЛицевогоСчета.ОбъектАренды;
			НоваяСтрока.Контрагент			= СтруктураЛицевогоСчета.Контрагент;
			НоваяСтрока.ДоговорКонтрагента	= СтруктураЛицевогоСчета.ДоговорКонтрагента;
			НоваяСтрока.ДокументЗаключенияДоговора	= СтруктураЛицевогоСчета.ДоговорАренды;
			
		КонецЦикла;   
		
		Т = "";
		
	КонецЦикла;
	
	Объект.Оплаты.Сортировать("ДатаОплаты Убыв");
	
	ОбработатьСтрокиСервер();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыОплатыНаСервере()
	
	 ТаблицаОплат			= Объект.Оплаты.Выгрузить(Новый Структура("Загрузить",Истина));
	 //ТаблицаОплат.Свернуть("ДатаОплаты,Контрагент,ДоговорКонтрагента,Документ,ДокументЗаключенияДоговора","СуммаОплаты");
	 
	 ТаблицаОплатСвернуто	= ТаблицаОплат.Скопировать();
	 ТаблицаОплатСвернуто.Свернуть("ДатаОплаты,Контрагент,Документ");
	 
	 Для Каждого СтрокаИт Из ТаблицаОплатСвернуто Цикл
		 
		 Если ЗначениеЗаполнено(СтрокаИт.Документ) Тогда
			 Док				= СтрокаИт.Документ.ПолучитьОбъект();
			 СсылкаНаДокумент	= Док.Ссылка;
		 Иначе
			 Док				= Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
			 Док.Дата			= СтрокаИт.ДатаОплаты;
			 Док.Контрагент		= СтрокаИт.Контрагент;
			 Док.УстановитьСсылкуНового(Документы.ПоступлениеНаРасчетныйСчет.ПолучитьСсылку(Новый УникальныйИдентификатор));
			 СсылкаНаДокумент	= Док.ПолучитьСсылкуНового();
		 КонецЕсли;
		 
		 Док.Организация	= Объект.Организация;
		 Док.СчетОрганизации= Объект.РасчетныйСчет;
		 Док.ВалютаДокумента= Объект.РасчетныйСчет.ВалютаДенежныхСредств;
		 Док.ВидОперации	= Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		 Док.СчетБанк		= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		 Док.АР_ОплатаАренды	= Истина;
		 Док.СтатьяДвиженияДенежныхСредств						= Объект.СтатьяДвиженияДенежныхСредств;
		 
		 НайденныеСтроки	= Объект.Оплаты.НайтиСтроки(Новый Структура("Контрагент,ДатаОплаты,Документ,Загрузить",СтрокаИт.Контрагент,СтрокаИт.ДатаОплаты,СтрокаИт.Документ,Истина));
		 
		 Если НайденныеСтроки.Количество() = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Для Каждого Строка Из НайденныеСтроки Цикл
			 
			 НоваяСтрока								= Док.РасшифровкаПлатежа.Добавить();
			 НоваяСтрока.ДоговорКонтрагента				= Строка.ДоговорКонтрагента;
			 НоваяСтрока.КурсВзаиморасчетов				= 1;
			 НоваяСтрока.КратностьВзаиморасчетов		= 1;
			 НоваяСтрока.СтатьяДвиженияДенежныхСредств	= Объект.СтатьяДвиженияДенежныхСредств;
			 НоваяСтрока.СуммаПлатежа					= Строка.СуммаОплаты;
			 НоваяСтрока.СуммаВзаиморасчетов			= Строка.СуммаОплаты;
			 НоваяСтрока.АР_ОбъектАренды				= Строка.Помещение;
			 НоваяСтрока.АР_УслугаАренды				= Строка.ВидОплаты;
			 НоваяСтрока.АР_ПериодАренды				= Строка.ДатаОплаты;
			 
			 СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаИт.Контрагент, Строка.ДоговорКонтрагента);
			 ЭтоАванс =
			 НоваяСтрока.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
			 
			 НоваяСтрока.СчетУчетаРасчетовСКонтрагентом 	= ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетовПокупателя);
			 НоваяСтрока.СчетУчетаРасчетовПоАвансам 		= СчетаУчета.СчетАвансовПокупателя;
			 
			 Строка.Документ							= СсылкаНаДокумент;
			 
		 КонецЦикла;
		 
		 Док.СуммаДокумента								= Док.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		 
		 Попытка
			 Если Док.Проведен Тогда
				 Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			 КонецЕсли;
		 Исключение
		 КонецПопытки;
		 
		 Попытка
			 Док.Записать(РежимЗаписиДокумента.Запись);
		 Исключение
		 КонецПопытки;
		 
		 Попытка
			 Док.Записать(РежимЗаписиДокумента.Проведение);
		 Исключение
		 КонецПопытки;
		 
		 НайденныеСтроки								= Объект.Оплаты.НайтиСтроки(Новый Структура(""));
		 
	 КонецЦикла;
	
 КонецПроцедуры
 

&НаКлиенте
Процедура ПолучитьФайлыССервераФТП(МаскаФайлов, ПолучитьФайлыСДискаПоДате = Ложь)
	
	СписокФайловСервера.Очистить();
	КаталогОбмена							= СоздатьКаталогДляОбмена();
	
	Если НЕ ПолучитьФайлыСДискаПоДате Тогда
		
		ФТП									= ПолучитьФТПСоединение();
		Если ФТП = Неопределено Тогда
			Сообщить("Соединение с ФТП сервером НЕ установлено!!!");
			Возврат;
		КонецЕсли;
		
		СписокФайлов						= ФТП.НайтиФайлы("/out",МаскаФайлов,Ложь);
		
		Для Каждого Строка из СписокФайлов Цикл
			
			Если Строка.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока	 					= СписокФайловСервера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Расширение 			= СтрЗаменить(Строка.Расширение,".","");
			НоваяСтрока.ДатаФайла			= Строка.ПолучитьВремяИзменения();
			НоваяСтрока.ИмяФайлаНаДиске 	= КаталогОбмена + Формат(НоваяСтрока.ДатаФайла, "ДФ=yyMMdd") + "_" + СокрЛП(НоваяСтрока.ИмяБезРасширения) + "_" + СокрЛП(НоваяСтрока.Расширение) + ".txt";
			
			ПолучитьФайлСФТП(ФТП, НоваяСтрока.Имя, НоваяСтрока.ИмяФайлаНаДиске);
			
		КонецЦикла;
		
	Иначе
		
		Маска	 							= МаскаФайлов; //"*" + Формат(ДатаЗагружаемойОплаты, "ДФ=yyMMdd") + "*" + "_210.txt";
		
		СписокФайлов						= НайтиФайлы(КаталогОбмена,Маска,Ложь);
		Для Каждого Строка из СписокФайлов Цикл
			
			Если Строка.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока	 					= СписокФайловСервера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Расширение 			= СтрЗаменить(Строка.Расширение,".","");
			НоваяСтрока.ДатаФайла			= Строка.ПолучитьВремяИзменения();
			НоваяСтрока.ИмяФайлаНаДиске 	= Строка.ПолноеИмя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокФайловСервера.Сортировать("ДатаФайла Убыв");
	
	//Возврат ФТП;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлСФТП(ФТП, ФайлФТП, ИмяФайлаНаДиске)
	
	ФТП.УстановитьТекущийКаталог("/out");
	ФТП.Получить(ФайлФТП, ИмяФайлаНаДиске);
	
	Файл						= Новый Файл(ИмяФайлаНаДиске);
	Если Файл.Существует() Тогда
		//ФТП.Удалить(ФайлФТП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветыСервера(Команда)
	
	ПолучитьФайлыССервераФТП("*.204");
	//Если ФТП = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если СписокФайловСервера.Количество() = 0 Тогда
		Сообщить("Нет ответа на сервере");
		Возврат;
	КонецЕсли;
	
	НайденныйФайл				= СписокФайловСервера[0];
	ИмяФайла					= НайденныйФайл.ИмяФайлаНаДиске;
	//ПолучитьФайлСФТП(ФТП, НайденныйФайл.Имя, ИмяФайла);
	
	Т	 						= Новый ТекстовыйДокумент;
	Т.Прочитать(ИмяФайла);  
	Стр	 						= Т.ПолучитьСтроку(1); 
	Если СокрЛП(Стр) = "" Тогда 
		//Сообщить("Файл не найден");
		Возврат;
	КонецЕсли;
	
	См							= "^";
	СписокЗначений				= ИзСтрокиСРазделителями(Стр, См);  
	
	Результат					= СокрЛП(СписокЗначений[6].Значение); 
	Результат					= ?(Результат = "", 0, Число(Результат));
	Если Результат = 0 Тогда  
		Сообщить("Ошибок нет");
		Возврат;
	КонецЕсли;
	
	ДопПараметры				= Новый Структура;
	
	Д							= СписокЗначений[5].Значение; //Дата начисления
	ДопПараметры.Вставить("ДатаИсхСообщения", Дата(Число(Лев(Д,4)), Число(Сред(Д,5,2)), Число(Сред(Д,7,2))));
	ДопПараметры.Вставить("НомерИсхСообщения", Число(СписокЗначений[4].Значение));
	
	Д							= СписокЗначений[3].Значение; //Дата ответа
	ДопПараметры.Вставить("ДатаОтвета", Дата(Число(Лев(Д,4)), Число(Сред(Д,5,2)), Число(Сред(Д,7,2))));
	ДопПараметры.Вставить("ТекстОшибки", СписокЗначений[7].Значение);
	
	Таб							= Новый ТабличныйДокумент;   
	
	Макет						= ПолучитьМакетНаСервере("Ошибка204");
	ОбластьШапка				= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока				= Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.Заполнить(ДопПараметры); 
	Таб.Вывести(ОбластьШапка);
	
	Для н = 2 По Т.КоличествоСтрок() Цикл  
		
		СписокЗначений		= ИзСтрокиСРазделителями(Т.ПолучитьСтроку(н), См); 
		ДопПараметры.Вставить("НомПП", СписокЗначений[0].Значение);
		ДопПараметры.Вставить("ТекстОшибки", СписокЗначений[1].Значение);
		
		ОбластьСтрока.Параметры.Заполнить(ДопПараметры);
		Таб.Вывести(ОбластьСтрока); 
		
	КонецЦикла;
	
	Таб.Показать();	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиСервер()
	
	Если Объект.Оплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Табл			= Объект.Оплаты.Выгрузить();
	Табл.Свернуть("ДатаОплаты");
	Табл.Сортировать("ДатаОплаты Убыв");
	
	ДатаНач			= НачалоДня(Табл[Табл.Количество()-1].ДатаОплаты);
	ДатаКон			= КонецДня(Табл[0].ДатаОплаты);

	//////////////////////
	//запрос по договорам
	Запрос 			= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Аренда_ДоговорыСрезПоследних.ОбъектАренды КАК Помещение,
	               |	МАКСИМУМ(Аренда_ДоговорыСрезПоследних.ЗаключениеДоговора) КАК ДокументЗаключенияДоговора,
	               |	Аренда_ДоговорыСрезПоследних.Договор.Владелец КАК Контрагент,
	               |	МАКСИМУМ(Аренда_ДоговорыСрезПоследних.Договор) КАК ДоговорКонтрагента
	               |ИЗ
	               |	РегистрСведений.АР_СтатусыОбъектовАренды.СрезПоследних(
	               |			&ДатаКон,
	               |			ОбъектАренды В (&СписокПомещений)
	               |				И Статус = ЗНАЧЕНИЕ(Перечисление.АР_СтатусыОбъектовАренды.ВАренде)) КАК Аренда_ДоговорыСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Аренда_ДоговорыСрезПоследних.ОбъектАренды,
	               |	Аренда_ДоговорыСрезПоследних.Договор.Владелец";
	
	Запрос.УстановитьПараметр("СписокПомещений", Объект.Оплаты.Выгрузить().ВыгрузитьКолонку("Помещение"));
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	РезультатКонтрагенты = Запрос.Выполнить().Выгрузить();
	
	/////////////////////////
	//запрос по документам оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	               |	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	               |	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента,
	               |	ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	НАЧАЛОПЕРИОДА(ПоступлениеНаРасчетныйСчет.Дата, ДЕНЬ) КАК Дата
	               |ИЗ
	               |	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	               |ГДЕ
	               |	ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента В(&СписокДоговоров)";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("СписокДоговоров", РезультатКонтрагенты.ВыгрузитьКолонку("ДоговорКонтрагента"));
	РезультатДокументы 						= Запрос.Выполнить().Выгрузить();
	
	ТаблицаОплат							= Объект.Оплаты.Выгрузить();
	ТаблицаОплат.Свернуть("Помещение, ДатаОплаты","СуммаОплаты");
	
	Для Каждого Строка Из ТаблицаОплат Цикл
		
		НайденныеСтрокиОплат				= Объект.Оплаты.НайтиСтроки(Новый Структура("Помещение",Строка.Помещение));
		
		НайденныеСтроки						= РезультатКонтрагенты.НайтиСтроки(Новый Структура("Помещение",Строка.Помещение));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого СтрокаОпл Из НайденныеСтрокиОплат Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОпл, НайденныеСтроки[0],"Контрагент,ДоговорКонтрагента,ДокументЗаключенияДоговора");
			КонецЦикла;
			
			НайденныеСтроки					= РезультатДокументы.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Дата, СуммаДокумента",НайденныеСтроки[0].ДоговорКонтрагента, НачалоДня(Строка.ДатаОплаты), Строка.СуммаОплаты));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого СтрокаОпл Из НайденныеСтрокиОплат Цикл
					СтрокаОпл.Документ		=  НайденныеСтроки[0].Ссылка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Оплаты Цикл
		
		Строка.Загрузить 					= НЕ ЗначениеЗаполнено(Строка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура СоздатьДокументыОплаты(Команда)
	СоздатьДокументыОплатыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОплатыСАрхива(Команда)
	
	ДатаНач						= ТекущаяДата();
	Если ВвестиДату(ДатаНач, "Укажите дату загружаемых оплат", ЧастиДаты.Дата) Тогда
		
		ДатаЗагружаемойОплаты	= ДатаНач;
		
		Если ЗначениеЗаполнено(ДатаЗагружаемойОплаты) Тогда
			ЗагрузитьОплатыЕРИП("СДиска");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключения(Команда)
	ОткрытьФорму("Обработка.ИТ_ВыгрузкаНачисленийВЕРИП.Форма.ФормаНастройки");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Оплаты Цикл
		
		Строка.Загрузить 	= ?(Команда.Имя = "УстановитьФлажки", Истина, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляФайловФТПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог			= Объект.КаталогДляФайловФТП;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Объект.КаталогДляФайловФТП	= ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	УстановитьVPNСоединение();
	
	ФТП					= ПолучитьФТПСоединение();
	Если ФТП = Неопределено Тогда
		Сообщить("Соединение с ФТП сервером НЕ установлено!!!");
	Иначе
		Сообщить("Соединение с ФТП сервером УСТАНОВЛЕНО!!!");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Служебные

&НаСервереБезКонтекста
Процедура УстановитьVPNСоединение()

	ИмяФайлаЗип = "daiERIP.bat";
	ВремКаталог = Константы.ИТ_КаталогОбменаДаннымиЕРИПучить() + "\DIAL\";
	
	Попытка
		ЗапуститьПриложение(""""+ВремКаталог + ИмяФайлаЗип+"""");
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с ЕРИП", УровеньЖурналаРегистрации.Ошибка, , ОписаниеОшибки(), "Ошибка установки VPN соединения");
	КонецПопытки;

КонецПроцедуры

//Разделяет лицевой счет на Контрагент и Договор
//
//Лицевой счет
//код контрагента (10 символов)
//код договора (8 символов)
//1 - залог, 0 - основная
&НаСервереБезКонтекста
Функция РазобратьЛицевойСчет(ЛицевойСчет)

	КодКонтрагент = Прав("000000000"+Сред(ЛицевойСчет, 2, 9), 9);
	КодДоговора = Прав("000000000"+Сред(ЛицевойСчет, 11, 8), 9);
	
	СтруктруаЛицевогоСчет = Новый Структура("Контрагент, ДоговорКонтрагента, УслугаАренды, ДоговорАренды, ОбъектАренды");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АР_ЗаключениеДоговораАренды.Ссылка КАК ДоговорАренды,
		|	АР_ЗаключениеДоговораАренды.Контрагент КАК Контрагент,
		|	АР_ЗаключениеДоговораАренды.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	АР_ЗаключениеДоговораАренды.ОбъектАренды КАК ОбъектАренды,
		|	АР_ОсновнаяУслугаПоАренде.Значение КАК УслугаАренды
		|ИЗ
		|	Документ.АР_ЗаключениеДоговораАренды КАК АР_ЗаключениеДоговораАренды,
		|	Константа.АР_ОсновнаяУслугаПоАренде КАК АР_ОсновнаяУслугаПоАренде
		|ГДЕ
		|	АР_ЗаключениеДоговораАренды.ДоговорКонтрагента.Код = &КодДоговора
		|	И АР_ЗаключениеДоговораАренды.Контрагент.Код = &КодКонтрагент";
	
	Запрос.УстановитьПараметр("КодКонтрагент", КодКонтрагент);
	Запрос.УстановитьПараметр("КодДоговора", КодДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктруаЛицевогоСчет, ВыборкаДетальныеЗаписи);
	КонецЦикла;
		
	Возврат СтруктруаЛицевогоСчет;	

КонецФункции // ПолучитьПомещениеПоЛицевомуСчету()

&НаСервереБезКонтекста
Функция ПолучитьКонстантуЕРИП()

	Возврат Константы.ИТ_ПараметрыОбменаДаннымиЕРИПучить();

КонецФункции // ПолучитьКонстантуЕРИП()

&НаСервереБезКонтекста
Функция ПолучитьКонстантуКаталогЕРИП()

	Возврат Константы.ИТ_КаталогОбменаДаннымиЕРИПучить();

КонецФункции // ПолучитьКонстантуЕРИП()

&НаКлиенте
Функция ИзСтрокиСРазделителями(Стр, См) 
	
	Стр				= Стр + См;
	
	СписокЗначений	= Новый СписокЗначений;
	
	Пока 1 = 1 Цикл 
		
		Поз			= Найти(Стр, См);
		
		Если Поз > 0 Тогда     
			
			Стр1	= СокрЛП(Лев(Стр, Поз-1));
		    Стр		= СокрЛП(Сред(Стр, Поз + 1)); 
			
			//Если СокрЛП(Стр1) <> "" Тогда
				СписокЗначений.Добавить(Стр1);  
			//КонецЕсли;   
			
		Иначе
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;

    Возврат СписокЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(НазваниеМакета)
	
	Об	= РеквизитФормыВЗначение("Объект");
	Возврат Об.ПолучитьМакет(НазваниеМакета);
	
КонецФункции

&НаСервере
Функция УстановитьДатуФормирования()
	
	Попытка
		Об							= Объект.ДокументНаВыгрузкуВЕРИП.Ссылка.ПолучитьОбъект();
		Об.ВыгруженНаФТП			= Истина;
		Об.ДатаФормированияСообщения= ТекДата;
		Об.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Истина;
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция СоздатьКаталогДляОбмена()
	
	Если ПустаяСтрока(Объект.КаталогДляФайловФТП) Тогда
		КаталогОбмена				= КаталогВременныхФайлов();
	Иначе
		КаталогОбмена				= СокрЛП(Объект.КаталогДляФайловФТП);
	КонецЕсли;
	
	Если Прав(КаталогОбмена,1) <> "\" Тогда  
		КаталогОбмена				= КаталогОбмена + "\";
	КонецЕсли; 
	
	//КаталогОбмена					= КаталогОбмена + "FTP\";  
	
	КаталогНаДиске 					= Новый Файл(КаталогОбмена);
	Если НЕ КаталогНаДиске.Существует() Тогда       
		СоздатьКаталог(КаталогОбмена);
	КонецЕсли;
	
	Возврат КаталогОбмена;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФТПСоединение()
	
	См					= "#";
	ПараметрыОбмена	 	= СокрЛП(ПолучитьКонстантуЕРИП()) + См;  
	
	Поз					= Найти(ПараметрыОбмена, См);
	ФТПСервер			= СокрЛП(Лев(ПараметрыОбмена,Поз-1)); 
	ПараметрыОбмена		= СокрЛП(Сред(ПараметрыОбмена,Поз+1));  
	
	Поз					= Найти(ПараметрыОбмена, См);
	ФТППорт				= СокрЛП(Лев(ПараметрыОбмена,Поз-1)); 
	ПараметрыОбмена		= СокрЛП(Сред(ПараметрыОбмена,Поз+1));
	
	Если СокрЛП(ФТППорт) = "" тогда
		ФТППорт			= 21; 
	КонецЕсли;
	
	Поз					= Найти(ПараметрыОбмена, См);
	ФТППользователь		= СокрЛП(Лев(ПараметрыОбмена,Поз-1)); 
	ПараметрыОбмена		= СокрЛП(Сред(ПараметрыОбмена,Поз+1));
	
	Поз					= Найти(ПараметрыОбмена, См);
	ФТППароль			= СокрЛП(Лев(ПараметрыОбмена,Поз-1)); 
	ПараметрыОбмена		= СокрЛП(Сред(ПараметрыОбмена,Поз+1));
	
	Поз					= Найти(ПараметрыОбмена, См);
	КодОтправителя		= СокрЛП(Лев(ПараметрыОбмена,Поз-1)); 
	ПараметрыОбмена		= СокрЛП(Сред(ПараметрыОбмена,Поз+1));
	
	Попытка
		Попытка
			ФТП			= Новый FTPСоединение(ФТПСервер,ФТППорт,ФТППользователь,ФТППароль,,Истина, 5);
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Обмен с ЕРИП", "Ошибка",ОписаниеОшибки(), ТекущаяДата(), Истина); 
			ФТППорт		= 990;
			ФТП			= Новый FTPСоединение(ФТПСервер,ФТППорт,ФТППользователь,ФТППароль,,Истина, 5);
		Конецпопытки;
		Возврат ФТП;
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Обмен с ЕРИП", "Ошибка",ОписаниеОшибки(), ТекущаяДата(), Истина); 
		Возврат Неопределено;
	Конецпопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, ДоговорКонтрагента);
	Возврат СчетаУчета;

КонецФункции


#КонецОбласти